Safety in Tungsten

The Tungsten language attempts to serve two purposes which are at odds with each other: it is intended to be a safe language like JVM bytecode or MSIL, but it also needs to be able to represent arbitrary unsafe programs as with LLVM. This dichotomy can be resolved by designating a subset of the language as safe. 

Safe operations always produced well defined behavior. Unsafe operations may result in undefined behavior if they are used incorrectly. Unsafe operations still produce well defined behavior if they are used correctly, but the compiler will usually not be able to determine whether this is the case. In order to implement safe languages, safe higher level primitives are provided which can be lowered to unsafe primitives. As an example, array operations in Tungsten are unsafe. If the bound of an array is unknown, values can be read or written out of bounds. Although the compiler may be able to determine whether array operations are safe in some cases, doing so in general is undecidable. Because of this, a separate bounded array primitive is provided, which implicitly carries the size of the array at runtime. When bounded array operations are lowered to normal array operations, the bound is made explicit, and checks are inserted before every read or write.

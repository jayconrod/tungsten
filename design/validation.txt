Stages in validation (in order)
If an error is detected in any level of validation, the levels below it are not performed. This means that lower levels may assume invariants checked by higher levels.

* Dependency validation
This check makes sure that a module doesn't depend on another module more than once.
* Component validation
Verifies the basic structure of each definition and type. This mainly checks symbolic references between definitions. Each symbol must refer to a definition of the correct class. In cases where a definition references a list of other definitions (such as a block containing instructions), this will check whether the same definition is referenced more than once in a list.
* Root class validation
This verifies that there is at most one root class (a class which has no superclass) and that the root class is not parameterized.
* Cycle validation
** Struct cycle 
Verifies that a struct does not contain a field (either directly or within another field) whose type is the same struct type. 
** Inheritance cycle 
Verifies that no class or interface descends from itself.
** Type parameter cycle 
Verifies that no type parameter is upper or lower bounded (directly orindirectly) by itself.
** Illegal inheritance 
Verifies that for every class or interface C:
Let C' be the direct superclass of C
For each inherited interface I:
  Let I' be the superclass of I (direct or indirect)
  C' descends from I'
* Conflicting inheritance validation
Verifies that for every class or interface C:
For each inherited class or interface C':
There is exactly one inherited type for C', even if C' is inherited multiple ways.
* Type valiation
* Value validation
* Type parameter validation
Type parameter definitions are validated first to simplify validation of other definitions. It is easier if we can assume type parameters are correct when checking classes and interfaces.
* Other definition validation
* Main function validation (programs only)
This checks whether a "main" function is present and whether it has the correct type.


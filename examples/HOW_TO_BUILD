Building Tungsten to native code requires several steps. 

==Prerequisites==

You must have successfully run "buildr install" in the root directory
of the project. If you are able to do this, then you have Java
installed, and buildr has installed Scala for you.

If you want to be able to compile to native code, you will need to
install LLVM. You can also download it from llvm.org. Tungsten has
been tested with LLVM 2.8. No guarantees are made about earlier or
later versions.

==Setting up your environment==

When you compiled Tungsten with "buildr install", buildr downloaded a
suitable version of Scala for you. However, in order to run Tungsten
commands, you'll need both Scala and Tungsten in your classpath.
You'll also want the Tungsten wrapper scripts to be in your PATH. 

To set up your environment, source the setenv.sh script like this:

 . setenv.sh

This must be run from the project root directory.

==Building Tungsten files==

You can build all the examples at once just by running "make".

Here are the tools make uses to build native binaries from Tungsten
assembly files:

w-as (Tungsten assembler) - converts .w (text) to .wo (binary)
w-link (Tungsten linker) - converts .wo to .wp (program) or .wl (library)
w-to-llvm (LLVM backend) - converts .wo, .wp, .wl to .ll (LLVM assembly)
llvm-as (LLVM assembler) - converts .ll to .bc (LLVM bitcode)
opt (LLVM optimizer) - optimizes .bc, produces new .bc
llc (LLVM compiler) - converts .bc to .s (native assembly)
gcc (GNU compiler driver) - builds .s and links with C runtime objects

